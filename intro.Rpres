<style type="text/css">
.small-code pre code {
   font-size: 1.1em;
}
</style>

Intro to ggplot2
========================================================
author: Max Joseph & Joe Mihaljevic
font-family: Helvetica
date: Oct 1 2013

What is ggplot2?
========================================================

R package for visualization based on the grammar of graphics.

Developed primarily by Hadley Wickham

 - [ggplot2 website](http://ggplot2.org/)

 - [source code](https://github.com/hadley/ggplot2)

Grammar of graphics
========================================================

A syntactic and conceptual framework for producing graphics.

![](http://www.r-bloggers.com/wp-content/uploads/2006/10/2006-06-22_useR2006_GrammarGraphics_0387245448.02.LZZZZZZZ1.jpg)

Implementation in ggplot2
========================================================
One syntactic framework for many plots

^ major advantage over `base` graphics

Elements
========================================================
Plots emerge from layered components:
- aesthetics (roles variables play)
- geometric objects
- scales 
- stats
- facets

Getting started 
==========================
class: small-code
```{r eval=FALSE}
install.packages("ggplot2")
require(ggplot2)
```


Data
==============
class: small-code
ggplot2 uses data frames

```{r}
# load data
data(msleep)

# check object class
class(msleep)
```

Scatterplot
==========================================
class: small-code
```{r}
p <- ggplot(msleep, aes(x=bodywt, y=brainwt)) + geom_point()
```
```{r echo=FALSE}
p <- p +
  theme(axis.title=element_text(face="bold", size=24, vjust=0.3),
        axis.text=element_text(size=20, color="black"))+
  labs(x="Body Weight", y="Brain Weight")
```
```{r fig=TRUE, fig.align="center", fig.width=12, fig.height=6}
p
```

Aesthetics & geoms
==========================================
class: small-code
```{r}
alt <- ggplot(msleep) + geom_point(aes(x=bodywt, y=brainwt))
```
```{r echo=FALSE}
alt <- alt + theme(axis.title=element_text(face="bold", size=24, vjust=0.3),
        axis.text=element_text(size=20, color="black"))+
  labs(x="Body Weight", y="Brain Weight")
```
```{r fig.align="center", fig.width=12, fig.height=6}
alt
```

Axis scaling
===================================
class: small-code
```{r}
p <- p + scale_y_log10() + scale_x_log10()
```
```{r echo=FALSE}
p <- p + theme(axis.text.y=element_text(angle=90, hjust=0.5))
```
```{r fig=TRUE, fig.width=12, fig.height=6, fig.align="center",}
p
```

Classic theme
=============
class: small-code
```{r}
p <- p + theme_classic()
```
```{r echo=FALSE}
p <- p +
  theme(axis.title=element_text(face="bold", size=24, vjust=0.3),
        axis.text=element_text(size=20, color="black"),
        axis.text.y=element_text(angle=90, hjust=0.5))+
  labs(x="Body Weight", y="Brain Weight")
```
```{r fig=TRUE, fig.align="center", fig.width=12, fig.height=6}
p
```
Smoothing
============
class: small-code
```{r fig=TRUE, fig.align="center", fig.width=12, fig.height=6}
p + stat_smooth()
```

OLS regression line
====================
class: small-code
```{r fig=TRUE, fig.align="center", fig.width=12, fig.height=6}
p <- p + stat_smooth(method="lm")
p
```

Faceting
=============
class: small-code
```{r eval=FALSE}
p + facet_wrap(~vore)
```
```{r echo=FALSE, fig=TRUE, fig.align="center", fig.width=12, fig.height=6}
p + facet_wrap(~vore)+
  theme(strip.text=element_text(size=20))
```

Color
======
class: small-code
```{r eval=FALSE}
p + geom_point(aes(color=vore), size=3)
```
```{r echo=FALSE, fig=TRUE, fig.align="center", fig.width=12, fig.height=6}
p + geom_point(aes(color=vore), size=3)+
  theme(legend.text=element_text(size=20),
        legend.title=element_text(size=22, face="bold"))
```

Line plots
==============
class: small-code
```{r}
data(co2)
lp <- ggplot(data.frame(co2), aes(x=1:length(co2), y=co2)) + geom_line()
```
```{r echo=FALSE}
lp <- lp +
  labs(x="ID order", y=expression(paste("CO"[2], sep="")))+
  theme(axis.title=element_text(face="bold", size=24, lineheight=0.5),
        axis.text=element_text(size=20, color="black"))
```
```{r fig=TRUE, fig.align="center", fig.width=12, fig.height=6}
lp
```

Box plots
=========
class: small-code
```{r}
bp <- ggplot(msleep, aes(x=conservation, y=awake)) + geom_boxplot()
```
```{r echo=FALSE}
bp <- bp +
  labs(x="Conservation", y="Awake")+
  theme(axis.title=element_text(face="bold", size=24, lineheight=0.5),
        axis.text=element_text(size=20, color="black"))
```
```{r fig=TRUE, fig.align="center", fig.width=12, fig.height=6}
bp
```

Dynamite plots
==============
Please don't.   
![](http://i.imgur.com/A82Bvrg.png)

Dynamite plots
==============
class: small-code
First you have to create error bar parameters
```{r}
sumd <- aggregate(awake ~ conservation, data=msleep, FUN=mean)

sumd$sd <- aggregate(awake ~ conservation, data=msleep, FUN=sd)[,2]

limits <- aes(ymax = awake + sd, ymin = awake - sd)
```

Dynamite plots
==============
class: small-code
```{r}
dyp <- ggplot(sumd, aes(x=conservation, y=awake)) + geom_bar(fill="grey") + theme_classic()
```
```{r echo=FALSE}
dyp <- dyp +
  labs(x="Conservation", y="Awake")+
  theme(axis.title=element_text(face="bold", size=24, lineheight=0.5),
        axis.text=element_text(size=20, color="black"))
```
```{r fig=TRUE, fig.align="center", fig.width=12, fig.height=6}
dyp
```
Dynamite plots
==============
class: small-code
Add your error bars
```{r fig=T, fig.align="center", fig.width=12, fig.height=6}
dyp + geom_errorbar(limits, width=0.25)
```

Combining plot types
====================
class: small-code
```{r fig=T, fig.align="center", fig.width=20, fig.height=6}
require(gridExtra)
grid.arrange(p, bp, ncol=2)
```

Other aesthetics
==============================
- shape
- size
- linetype
- alpha
- fill

All can be mapped to variables

Other geoms
===========
- jitter
- text
- segment
- polygon
- rect
- rug
- step
- density
- contour


Extensions
==========
- ggdendro
- ggmcmc
- ggmap
- GGally
- ggROC
- ggthemes

Questions?
==========

Your turn
=========
### `msleep`
1) Make a scatterplot of `sleep_total` vs. `sleep_rem`   
2) Make point size proportional to log(body mass)   
3) Add a OLS regression line   
4) Color-code the points according to `vore`. Does the scaling of REM & total sleep differ w/ diet?   

### `movies`
1) Plot a histogram of `rating`    
2) Plot the overall density of `rating`, changing your code as little as possible   
3) Plot the density of `rating` for each `mpaa` level (using color, fill, or facet)
